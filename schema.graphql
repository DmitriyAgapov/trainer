# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Role {
  id: ID!
  name: String
  canManageContent: Boolean
  canManageUsers: Boolean
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  usersCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canManageContent: BooleanFilter
  canManageUsers: BooleanFilter
  users: UserManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageContent: OrderDirection
  canManageUsers: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input RoleUpdateInput {
  name: String
  canManageContent: Boolean
  canManageUsers: Boolean
  users: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canManageContent: Boolean
  canManageUsers: Boolean
  users: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: Role
  address: String
  phone: String
  instagram: String
  facebook: String
  linkedin: String
  emailContacts: String
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: RoleWhereInput
  address: StringFilter
  phone: StringFilter
  instagram: StringFilter
  facebook: StringFilter
  linkedin: StringFilter
  emailContacts: StringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  address: OrderDirection
  phone: OrderDirection
  instagram: OrderDirection
  facebook: OrderDirection
  linkedin: OrderDirection
  emailContacts: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForUpdateInput
  address: String
  phone: String
  instagram: String
  facebook: String
  linkedin: String
  emailContacts: String
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForCreateInput
  address: String
  phone: String
  instagram: String
  facebook: String
  linkedin: String
  emailContacts: String
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type Callback {
  id: ID!
  name: String
  email: String
  phone: String
  publishedDate: DateTime
  message: String
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input CallbackWhereUniqueInput {
  id: ID
}

input CallbackWhereInput {
  AND: [CallbackWhereInput!]
  OR: [CallbackWhereInput!]
  NOT: [CallbackWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  phone: StringFilter
  publishedDate: DateTimeNullableFilter
  message: StringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input CallbackOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  publishedDate: OrderDirection
  message: OrderDirection
}

input CallbackUpdateInput {
  name: String
  email: String
  phone: String
  publishedDate: DateTime
  message: String
}

input CallbackUpdateArgs {
  where: CallbackWhereUniqueInput!
  data: CallbackUpdateInput!
}

input CallbackCreateInput {
  name: String
  email: String
  phone: String
  publishedDate: DateTime
  message: String
}

type Section {
  id: ID!
  type: String
  order: Int
  subtitle: String
  title: String
  url: String
  status: String
  image: ImageFieldOutput
  background: ImageFieldOutput
  video: FileFieldOutput
  content: Section_content_Document
  linkText: String
  link: String
  linkType: String
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

interface FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

type Section_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input SectionWhereUniqueInput {
  id: ID
  url: String
}

input SectionWhereInput {
  AND: [SectionWhereInput!]
  OR: [SectionWhereInput!]
  NOT: [SectionWhereInput!]
  id: IDFilter
  type: StringNullableFilter
  order: IntNullableFilter
  subtitle: StringFilter
  title: StringFilter
  url: StringFilter
  status: StringNullableFilter
  linkText: StringFilter
  link: StringFilter
  linkType: StringNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input SectionOrderByInput {
  id: OrderDirection
  type: OrderDirection
  order: OrderDirection
  subtitle: OrderDirection
  title: OrderDirection
  url: OrderDirection
  status: OrderDirection
  linkText: OrderDirection
  link: OrderDirection
  linkType: OrderDirection
}

input SectionUpdateInput {
  type: String
  order: Int
  subtitle: String
  title: String
  url: String
  status: String
  image: ImageFieldInput
  background: ImageFieldInput
  video: FileFieldInput
  content: JSON
  linkText: String
  link: String
  linkType: String
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input FileFieldInput {
  upload: Upload
  ref: String
}

input SectionUpdateArgs {
  where: SectionWhereUniqueInput!
  data: SectionUpdateInput!
}

input SectionCreateInput {
  type: String
  order: Int
  subtitle: String
  title: String
  url: String
  status: String
  image: ImageFieldInput
  background: ImageFieldInput
  video: FileFieldInput
  content: JSON
  linkText: String
  link: String
  linkType: String
}

type CourseStructure {
  id: ID!
  order: Int
  title: String
  image: ImageFieldOutput
  imageSvg: FileFieldOutput
  content: CourseStructure_content_Document
}

type CourseStructure_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CourseStructureWhereUniqueInput {
  id: ID
}

input CourseStructureWhereInput {
  AND: [CourseStructureWhereInput!]
  OR: [CourseStructureWhereInput!]
  NOT: [CourseStructureWhereInput!]
  id: IDFilter
  order: IntNullableFilter
  title: StringFilter
}

input CourseStructureOrderByInput {
  id: OrderDirection
  order: OrderDirection
  title: OrderDirection
}

input CourseStructureUpdateInput {
  order: Int
  title: String
  image: ImageFieldInput
  imageSvg: FileFieldInput
  content: JSON
}

input CourseStructureUpdateArgs {
  where: CourseStructureWhereUniqueInput!
  data: CourseStructureUpdateInput!
}

input CourseStructureCreateInput {
  order: Int
  title: String
  image: ImageFieldInput
  imageSvg: FileFieldInput
  content: JSON
}

type CourseFeature {
  id: ID!
  order: Int
  title: String
  image: ImageFieldOutput
  imageSvg: FileFieldOutput
  content: CourseFeature_content_Document
}

type CourseFeature_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CourseFeatureWhereUniqueInput {
  id: ID
}

input CourseFeatureWhereInput {
  AND: [CourseFeatureWhereInput!]
  OR: [CourseFeatureWhereInput!]
  NOT: [CourseFeatureWhereInput!]
  id: IDFilter
  order: IntNullableFilter
  title: StringFilter
}

input CourseFeatureOrderByInput {
  id: OrderDirection
  order: OrderDirection
  title: OrderDirection
}

input CourseFeatureUpdateInput {
  order: Int
  title: String
  image: ImageFieldInput
  imageSvg: FileFieldInput
  content: JSON
}

input CourseFeatureUpdateArgs {
  where: CourseFeatureWhereUniqueInput!
  data: CourseFeatureUpdateInput!
}

input CourseFeatureCreateInput {
  order: Int
  title: String
  image: ImageFieldInput
  imageSvg: FileFieldInput
  content: JSON
}

type CourseBenefit {
  id: ID!
  order: Int
  title: String
  image: ImageFieldOutput
  imageSvg: FileFieldOutput
  content: CourseBenefit_content_Document
}

type CourseBenefit_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CourseBenefitWhereUniqueInput {
  id: ID
}

type LocalFileFieldOutput implements FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

type CloudFileFieldOutput implements FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input CourseBenefitWhereInput {
  AND: [CourseBenefitWhereInput!]
  OR: [CourseBenefitWhereInput!]
  NOT: [CourseBenefitWhereInput!]
  id: IDFilter
  order: IntNullableFilter
  title: StringFilter
}

input CourseBenefitOrderByInput {
  id: OrderDirection
  order: OrderDirection
  title: OrderDirection
}

input CourseBenefitUpdateInput {
  order: Int
  title: String
  image: ImageFieldInput
  imageSvg: FileFieldInput
  content: JSON
}

input CourseBenefitUpdateArgs {
  where: CourseBenefitWhereUniqueInput!
  data: CourseBenefitUpdateInput!
}

input CourseBenefitCreateInput {
  order: Int
  title: String
  image: ImageFieldInput
  imageSvg: FileFieldInput
  content: JSON
}

type Faq {
  id: ID!
  order: Int
  title: String
  content: Faq_content_Document
}

type Faq_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input FaqWhereUniqueInput {
  id: ID
}

input FaqWhereInput {
  AND: [FaqWhereInput!]
  OR: [FaqWhereInput!]
  NOT: [FaqWhereInput!]
  id: IDFilter
  order: IntNullableFilter
  title: StringFilter
}

input FaqOrderByInput {
  id: OrderDirection
  order: OrderDirection
  title: OrderDirection
}

input FaqUpdateInput {
  order: Int
  title: String
  content: JSON
}

input FaqUpdateArgs {
  where: FaqWhereUniqueInput!
  data: FaqUpdateInput!
}

input FaqCreateInput {
  order: Int
  title: String
  content: JSON
}

type Story {
  id: ID!
  order: Int
  title: String
  slug: String
  status: String
  publishedDate: DateTime
  image: ImageFieldOutput
  content: Story_content_Document
}

type Story_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input StoryWhereUniqueInput {
  id: ID
  slug: String
}

input StoryWhereInput {
  AND: [StoryWhereInput!]
  OR: [StoryWhereInput!]
  NOT: [StoryWhereInput!]
  id: IDFilter
  order: IntNullableFilter
  title: StringFilter
  slug: StringFilter
  status: StringNullableFilter
  publishedDate: DateTimeNullableFilter
}

input StoryOrderByInput {
  id: OrderDirection
  order: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  status: OrderDirection
  publishedDate: OrderDirection
}

input StoryUpdateInput {
  order: Int
  title: String
  slug: String
  status: String
  publishedDate: DateTime
  image: ImageFieldInput
  content: JSON
}

input StoryUpdateArgs {
  where: StoryWhereUniqueInput!
  data: StoryUpdateInput!
}

input StoryCreateInput {
  order: Int
  title: String
  slug: String
  status: String
  publishedDate: DateTime
  image: ImageFieldInput
  content: JSON
}

type Price {
  id: ID!
  order: Int
  title: String
  content: Price_content_Document
  fullContent: Price_fullContent_Document
  price: Int
  links(
    where: LinkWhereInput! = {}
    orderBy: [LinkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Link!]
  linksCount(where: LinkWhereInput! = {}): Int
}

type Price_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Price_fullContent_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PriceWhereUniqueInput {
  id: ID
}

input PriceWhereInput {
  AND: [PriceWhereInput!]
  OR: [PriceWhereInput!]
  NOT: [PriceWhereInput!]
  id: IDFilter
  order: IntNullableFilter
  title: StringFilter
  price: IntNullableFilter
  links: LinkManyRelationFilter
}

input LinkManyRelationFilter {
  every: LinkWhereInput
  some: LinkWhereInput
  none: LinkWhereInput
}

input PriceOrderByInput {
  id: OrderDirection
  order: OrderDirection
  title: OrderDirection
  price: OrderDirection
}

input PriceUpdateInput {
  order: Int
  title: String
  content: JSON
  fullContent: JSON
  price: Int
  links: LinkRelateToManyForUpdateInput
}

input LinkRelateToManyForUpdateInput {
  disconnect: [LinkWhereUniqueInput!]
  set: [LinkWhereUniqueInput!]
  create: [LinkCreateInput!]
  connect: [LinkWhereUniqueInput!]
}

input PriceUpdateArgs {
  where: PriceWhereUniqueInput!
  data: PriceUpdateInput!
}

input PriceCreateInput {
  order: Int
  title: String
  content: JSON
  fullContent: JSON
  price: Int
  links: LinkRelateToManyForCreateInput
}

input LinkRelateToManyForCreateInput {
  create: [LinkCreateInput!]
  connect: [LinkWhereUniqueInput!]
}

type Post {
  id: ID!
  order: Int
  title: String
  slug: String
  status: String
  date: DateTime
  image: ImageFieldOutput
  content: Post_content_Document
  tag(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagCount(where: TagWhereInput! = {}): Int
  author: Person
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  order: IntNullableFilter
  title: StringFilter
  slug: StringFilter
  status: StringNullableFilter
  date: DateTimeNullableFilter
  tag: TagManyRelationFilter
  author: PersonWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  order: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  status: OrderDirection
  date: OrderDirection
}

input PostUpdateInput {
  order: Int
  title: String
  slug: String
  status: String
  date: DateTime
  image: ImageFieldInput
  content: JSON
  tag: TagRelateToManyForUpdateInput
  author: PersonRelateToOneForUpdateInput
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PersonRelateToOneForUpdateInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  order: Int
  title: String
  slug: String
  status: String
  date: DateTime
  image: ImageFieldInput
  content: JSON
  tag: TagRelateToManyForCreateInput
  author: PersonRelateToOneForCreateInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PersonRelateToOneForCreateInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
}

type Task {
  id: ID!
  label: String
  priority: TaskPriorityType
  isComplete: Boolean
  assignedTo: Person
  finishBy: DateTime
}

enum TaskPriorityType {
  low
  medium
  high
}

input TaskWhereUniqueInput {
  id: ID
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  id: IDFilter
  label: StringFilter
  priority: TaskPriorityTypeNullableFilter
  isComplete: BooleanFilter
  assignedTo: PersonWhereInput
  finishBy: DateTimeNullableFilter
}

input TaskPriorityTypeNullableFilter {
  equals: TaskPriorityType
  in: [TaskPriorityType!]
  notIn: [TaskPriorityType!]
  not: TaskPriorityTypeNullableFilter
}

input TaskOrderByInput {
  id: OrderDirection
  label: OrderDirection
  priority: OrderDirection
  isComplete: OrderDirection
  finishBy: OrderDirection
}

input TaskUpdateInput {
  label: String
  priority: TaskPriorityType
  isComplete: Boolean
  assignedTo: PersonRelateToOneForUpdateInput
  finishBy: DateTime
}

input TaskUpdateArgs {
  where: TaskWhereUniqueInput!
  data: TaskUpdateInput!
}

input TaskCreateInput {
  label: String
  priority: TaskPriorityType
  isComplete: Boolean
  assignedTo: PersonRelateToOneForCreateInput
  finishBy: DateTime
}

type Person {
  id: ID!
  name: String
  email: String
  password: PasswordState
  address: String
  phone: String
  instagram: String
  facebook: String
  linkedin: String
  emailContacts: String
  tasks(
    where: TaskWhereInput! = {}
    orderBy: [TaskOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Task!]
  tasksCount(where: TaskWhereInput! = {}): Int
}

input PersonWhereUniqueInput {
  id: ID
  email: String
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  address: StringFilter
  phone: StringFilter
  instagram: StringFilter
  facebook: StringFilter
  linkedin: StringFilter
  emailContacts: StringFilter
  tasks: TaskManyRelationFilter
}

input TaskManyRelationFilter {
  every: TaskWhereInput
  some: TaskWhereInput
  none: TaskWhereInput
}

input PersonOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  address: OrderDirection
  phone: OrderDirection
  instagram: OrderDirection
  facebook: OrderDirection
  linkedin: OrderDirection
  emailContacts: OrderDirection
}

input PersonUpdateInput {
  name: String
  email: String
  password: String
  address: String
  phone: String
  instagram: String
  facebook: String
  linkedin: String
  emailContacts: String
  tasks: TaskRelateToManyForUpdateInput
}

input TaskRelateToManyForUpdateInput {
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  create: [TaskCreateInput!]
  connect: [TaskWhereUniqueInput!]
}

input PersonUpdateArgs {
  where: PersonWhereUniqueInput!
  data: PersonUpdateInput!
}

input PersonCreateInput {
  name: String
  email: String
  password: String
  address: String
  phone: String
  instagram: String
  facebook: String
  linkedin: String
  emailContacts: String
  tasks: TaskRelateToManyForCreateInput
}

input TaskRelateToManyForCreateInput {
  create: [TaskCreateInput!]
  connect: [TaskWhereUniqueInput!]
}

type Tag {
  id: ID!
  title: String
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  title: StringFilter
}

input TagOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input TagUpdateInput {
  title: String
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  title: String
}

type Gallery {
  id: ID!
  title: String
  image: ImageFieldOutput
}

input GalleryWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input GalleryWhereInput {
  AND: [GalleryWhereInput!]
  OR: [GalleryWhereInput!]
  NOT: [GalleryWhereInput!]
  id: IDFilter
  title: StringFilter
}

input GalleryOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input GalleryUpdateInput {
  title: String
  image: ImageFieldInput
}

input GalleryUpdateArgs {
  where: GalleryWhereUniqueInput!
  data: GalleryUpdateInput!
}

input GalleryCreateInput {
  title: String
  image: ImageFieldInput
}

type Link {
  id: ID!
  linkText: String
  link: String
  linkType: String
}

input LinkWhereUniqueInput {
  id: ID
}

input LinkWhereInput {
  AND: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
  id: IDFilter
  linkText: StringFilter
  link: StringFilter
  linkType: StringNullableFilter
}

input LinkOrderByInput {
  id: OrderDirection
  linkText: OrderDirection
  link: OrderDirection
  linkType: OrderDirection
}

input LinkUpdateInput {
  linkText: String
  link: String
  linkType: String
}

input LinkUpdateArgs {
  where: LinkWhereUniqueInput!
  data: LinkUpdateInput!
}

input LinkCreateInput {
  linkText: String
  link: String
  linkType: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCallback(data: CallbackCreateInput!): Callback
  createCallbacks(data: [CallbackCreateInput!]!): [Callback]
  updateCallback(
    where: CallbackWhereUniqueInput!
    data: CallbackUpdateInput!
  ): Callback
  updateCallbacks(data: [CallbackUpdateArgs!]!): [Callback]
  deleteCallback(where: CallbackWhereUniqueInput!): Callback
  deleteCallbacks(where: [CallbackWhereUniqueInput!]!): [Callback]
  createSection(data: SectionCreateInput!): Section
  createSections(data: [SectionCreateInput!]!): [Section]
  updateSection(
    where: SectionWhereUniqueInput!
    data: SectionUpdateInput!
  ): Section
  updateSections(data: [SectionUpdateArgs!]!): [Section]
  deleteSection(where: SectionWhereUniqueInput!): Section
  deleteSections(where: [SectionWhereUniqueInput!]!): [Section]
  createCourseStructure(data: CourseStructureCreateInput!): CourseStructure
  createCourseStructures(
    data: [CourseStructureCreateInput!]!
  ): [CourseStructure]
  updateCourseStructure(
    where: CourseStructureWhereUniqueInput!
    data: CourseStructureUpdateInput!
  ): CourseStructure
  updateCourseStructures(data: [CourseStructureUpdateArgs!]!): [CourseStructure]
  deleteCourseStructure(
    where: CourseStructureWhereUniqueInput!
  ): CourseStructure
  deleteCourseStructures(
    where: [CourseStructureWhereUniqueInput!]!
  ): [CourseStructure]
  createCourseFeature(data: CourseFeatureCreateInput!): CourseFeature
  createCourseFeatures(data: [CourseFeatureCreateInput!]!): [CourseFeature]
  updateCourseFeature(
    where: CourseFeatureWhereUniqueInput!
    data: CourseFeatureUpdateInput!
  ): CourseFeature
  updateCourseFeatures(data: [CourseFeatureUpdateArgs!]!): [CourseFeature]
  deleteCourseFeature(where: CourseFeatureWhereUniqueInput!): CourseFeature
  deleteCourseFeatures(
    where: [CourseFeatureWhereUniqueInput!]!
  ): [CourseFeature]
  createCourseBenefit(data: CourseBenefitCreateInput!): CourseBenefit
  createCourseBenefits(data: [CourseBenefitCreateInput!]!): [CourseBenefit]
  updateCourseBenefit(
    where: CourseBenefitWhereUniqueInput!
    data: CourseBenefitUpdateInput!
  ): CourseBenefit
  updateCourseBenefits(data: [CourseBenefitUpdateArgs!]!): [CourseBenefit]
  deleteCourseBenefit(where: CourseBenefitWhereUniqueInput!): CourseBenefit
  deleteCourseBenefits(
    where: [CourseBenefitWhereUniqueInput!]!
  ): [CourseBenefit]
  createFaq(data: FaqCreateInput!): Faq
  createFaqs(data: [FaqCreateInput!]!): [Faq]
  updateFaq(where: FaqWhereUniqueInput!, data: FaqUpdateInput!): Faq
  updateFaqs(data: [FaqUpdateArgs!]!): [Faq]
  deleteFaq(where: FaqWhereUniqueInput!): Faq
  deleteFaqs(where: [FaqWhereUniqueInput!]!): [Faq]
  createStory(data: StoryCreateInput!): Story
  createStories(data: [StoryCreateInput!]!): [Story]
  updateStory(where: StoryWhereUniqueInput!, data: StoryUpdateInput!): Story
  updateStories(data: [StoryUpdateArgs!]!): [Story]
  deleteStory(where: StoryWhereUniqueInput!): Story
  deleteStories(where: [StoryWhereUniqueInput!]!): [Story]
  createPrice(data: PriceCreateInput!): Price
  createPrices(data: [PriceCreateInput!]!): [Price]
  updatePrice(where: PriceWhereUniqueInput!, data: PriceUpdateInput!): Price
  updatePrices(data: [PriceUpdateArgs!]!): [Price]
  deletePrice(where: PriceWhereUniqueInput!): Price
  deletePrices(where: [PriceWhereUniqueInput!]!): [Price]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTask(data: TaskCreateInput!): Task
  createTasks(data: [TaskCreateInput!]!): [Task]
  updateTask(where: TaskWhereUniqueInput!, data: TaskUpdateInput!): Task
  updateTasks(data: [TaskUpdateArgs!]!): [Task]
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteTasks(where: [TaskWhereUniqueInput!]!): [Task]
  createPerson(data: PersonCreateInput!): Person
  createPeople(data: [PersonCreateInput!]!): [Person]
  updatePerson(where: PersonWhereUniqueInput!, data: PersonUpdateInput!): Person
  updatePeople(data: [PersonUpdateArgs!]!): [Person]
  deletePerson(where: PersonWhereUniqueInput!): Person
  deletePeople(where: [PersonWhereUniqueInput!]!): [Person]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createGallery(data: GalleryCreateInput!): Gallery
  createGalleries(data: [GalleryCreateInput!]!): [Gallery]
  updateGallery(
    where: GalleryWhereUniqueInput!
    data: GalleryUpdateInput!
  ): Gallery
  updateGalleries(data: [GalleryUpdateArgs!]!): [Gallery]
  deleteGallery(where: GalleryWhereUniqueInput!): Gallery
  deleteGalleries(where: [GalleryWhereUniqueInput!]!): [Gallery]
  createLink(data: LinkCreateInput!): Link
  createLinks(data: [LinkCreateInput!]!): [Link]
  updateLink(where: LinkWhereUniqueInput!, data: LinkUpdateInput!): Link
  updateLinks(data: [LinkUpdateArgs!]!): [Link]
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteLinks(where: [LinkWhereUniqueInput!]!): [Link]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  callbacks(
    where: CallbackWhereInput! = {}
    orderBy: [CallbackOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Callback!]
  callback(where: CallbackWhereUniqueInput!): Callback
  callbacksCount(where: CallbackWhereInput! = {}): Int
  sections(
    where: SectionWhereInput! = {}
    orderBy: [SectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Section!]
  section(where: SectionWhereUniqueInput!): Section
  sectionsCount(where: SectionWhereInput! = {}): Int
  courseStructures(
    where: CourseStructureWhereInput! = {}
    orderBy: [CourseStructureOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CourseStructure!]
  courseStructure(where: CourseStructureWhereUniqueInput!): CourseStructure
  courseStructuresCount(where: CourseStructureWhereInput! = {}): Int
  courseFeatures(
    where: CourseFeatureWhereInput! = {}
    orderBy: [CourseFeatureOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CourseFeature!]
  courseFeature(where: CourseFeatureWhereUniqueInput!): CourseFeature
  courseFeaturesCount(where: CourseFeatureWhereInput! = {}): Int
  courseBenefits(
    where: CourseBenefitWhereInput! = {}
    orderBy: [CourseBenefitOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CourseBenefit!]
  courseBenefit(where: CourseBenefitWhereUniqueInput!): CourseBenefit
  courseBenefitsCount(where: CourseBenefitWhereInput! = {}): Int
  faqs(
    where: FaqWhereInput! = {}
    orderBy: [FaqOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Faq!]
  faq(where: FaqWhereUniqueInput!): Faq
  faqsCount(where: FaqWhereInput! = {}): Int
  stories(
    where: StoryWhereInput! = {}
    orderBy: [StoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Story!]
  story(where: StoryWhereUniqueInput!): Story
  storiesCount(where: StoryWhereInput! = {}): Int
  prices(
    where: PriceWhereInput! = {}
    orderBy: [PriceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Price!]
  price(where: PriceWhereUniqueInput!): Price
  pricesCount(where: PriceWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tasks(
    where: TaskWhereInput! = {}
    orderBy: [TaskOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Task!]
  task(where: TaskWhereUniqueInput!): Task
  tasksCount(where: TaskWhereInput! = {}): Int
  people(
    where: PersonWhereInput! = {}
    orderBy: [PersonOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Person!]
  person(where: PersonWhereUniqueInput!): Person
  peopleCount(where: PersonWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  galleries(
    where: GalleryWhereInput! = {}
    orderBy: [GalleryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Gallery!]
  gallery(where: GalleryWhereUniqueInput!): Gallery
  galleriesCount(where: GalleryWhereInput! = {}): Int
  links(
    where: LinkWhereInput! = {}
    orderBy: [LinkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Link!]
  link(where: LinkWhereUniqueInput!): Link
  linksCount(where: LinkWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
